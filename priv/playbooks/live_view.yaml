---
- playbook: Util.BlockInFile
  params:
    header: Install Dependencies
    instruction: >
      Install Dependencies from Hex, with the latest version:
    text_block: >
      def deps do
        [
          {:phoenix_live_view, "~> 0.3.0"},
          {:floki, "~> 0.0.0", [only: test]}
        ]
      end
    check_for:
      - phoenix_live_view
      - floki
    target_file: mix.exs
- playbook: Util.TextBlock
  params:
    body: >
      If you want the latest features, instaoo from GitHub:

      ```elixir
      def deps do
        [
          {:phoenix_live_view, github: "phoenixframework/phoenix_live_view"},
          {:floki, "~> 0.0.0", [only: test]}
        ]
      end
      ```
- playbook: Util.Command
  params:
    instruction: "Now install dependencies:"
    command: "mix deps.get"
- playbook: Util.BlockInFile
  params:
    instruction: >
      Once installed, update your endpoint's configuration to
      include a signing salt.  You can generate a signing salt
      by running `mix phx.gen.secret 32`.
    text_block: >
      config :my_app, MyAppWeb.Endpoint,
      live_view: [
        signing_salt: "SECRET_SALT"
      ]
    check_for:
      - live_view
      - signing_salt
    target_file: config/config.exs
- playbook: Util.BlockInFile
  params:
    instruction: >
      Next, add the LiveView flash plug to your browser pipeline, after `:fetch_flash`:
    text_block: >
      pipeline :browser do
        ...
        plug :fetch_flash
        plug :Phoenix.LiveView.Flash
      end
    check_for:
      - Phoenix.LivewView.Flash
    target_file: lib/my_app_web/router.ex
- playbook: Util.BlockInFile
  params:
    instruction: >
      Add LiveView NPM dependencies. For a regular project, do:
    text_block: >
      {
        "dependencies": {
          "phoenix": "file:../deps/phoenix",
          "phoenix_html": "file:../deps/phoenix_html",
          "phoenix_live_view": "file:../deps/phoenix_live_view"
        }
      }
    target_file: assets/package.json,
    check_for: 
      - phoenix_live_view
      - phoenix_html
- playbook: Util.BlockInFile
  params:
    instruction: >
      For an umbrella project, the dependency paths should be modified:
    text_block: >
      {
        "dependencies": {
          "phoenix": "file:../../../deps/phoenix",
          "phoenix_html": "file:../../../deps/phoenix_html",
          "phoenix_live_view": "file:../../../deps/phoenix_live_view"
        }
      }
    target_file: assets/package.json,
    check_for: 
      - phoenix_live_view
      - phoenix_html
- playbook: Util.Command
  params:
    instruction: "Then install the new npm dependency."
    command: "npm install --prefix assets"
- playbook: Util.TextBlock
  params:
    body: >
      or `cd assets && npm install` for windows users if --prefix doesn't work
- playbook: Util.Command
  params:
    instruction: >
      If you had previously installed `phoenix_live_view` and want to get the latest javascript,
      then force an install.
    command: "cd assets && npm install --force phoenix_live_view"


